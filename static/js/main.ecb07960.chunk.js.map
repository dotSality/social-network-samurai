{"version":3,"sources":["Components/common/styles/Common.module.css","redux/form-reducer.ts","Components/common/Img/loading-buffering.gif","Components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","Components/Friends/Friends.module.css","Components/Friends/Friend/Friend.module.css","Components/Header/Header.module.css","redux/profile-reducer.ts","redux/dialogs-reducer.ts","redux/users-reducer.ts","api/api.ts","Components/NavBar/NavBar.module.css","Components/News/News.tsx","Components/Music/Music.tsx","Components/Settings/Settings.tsx","Components/Friends/Friend/Friend.tsx","Components/Friends/Friends.tsx","Components/NavBar/NavBar.tsx","Components/NavBar/NavBarContainer.tsx","Components/Header/Header.tsx","redux/auth-reducer.ts","Components/Header/HeaderContainer.tsx","Components/LoginPage/LoginForm.tsx","Components/LoginPage/LoginPage.tsx","redux/app-reducer.tsx","HOC/LazyWithSuspense.tsx","App.tsx","reportWebVitals.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","index.tsx"],"names":["module","exports","initState","error","editMode","formReducer","state","action","type","isEditMode","setFormError","setEditMode","onEditMode","dispatch","a","Preloader","style","width","src","loading","alt","postFieldValidator","required","maxLength","value","message","emailFieldValidator","pattern","passwordFieldValidator","captchaFieldValidator","ADD_POST","SET_USER_PROFILE","SET_STATUS","DELETE_POST","SAVE_PHOTO_SUCCESS","initialState","posts","id","post","likesCount","profile","status","profileReducer","newPost","Date","getTime","postText","filter","p","postId","photos","loadUserProfile","userId","profileAPI","getUserProfile","getProfileRes","setUserProfile","getUserStatus","getStatusRes","setStatus","updateUserStatus","updateStatus","data","resultCode","uploadPhoto","file","res","uploadPhotoSuccess","submitProfile","getState","auth","profileRes","messages","addPost","ADD_MESSAGE","dialogs","name","sender","dialogsReducer","newMessage","messageText","addMessage","FOLLOW_TOGGLE","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_COUNT","TOGGLE_IS_FETCHING","FOLLOWING_IN_PROGRESS","users","pageSize","totalUsersCount","currentPage","isFetching","isFollowing","followToggle","userID","setCurrentPage","toggleIsFollowingProgress","requestUsers","usersAPI","getUsers","getUsersRes","items","totalCount","toggleFollow","isFollowed","getUserData","unfollowUserRequest","followUserRequest","usersReducer","map","u","followed","instance","axios","create","baseURL","withCredentials","headers","get","then","delete","authAPI","isAuthRequest","userLogin","userLogout","captchaRequest","put","formData","FormData","append","News","Music","Settings","Friend","props","className","s","friend","avatar","Friends","friendItems","friends","f","friendsCont","header","NavBar","nav","mainNav","item","to","activeClassName","activeLink","active","NavBarContainer","connect","sidebar","Header","loginBlock","isAuth","login","onClick","logout","SET_USER_DATA","STOP_SUBMIT","SET_CAPTCHA","email","remember","captchaUrl","loginRequest","setAuthUserData","captcha","payload","stopSubmit","setCaptcha","url","HeaderContainer","this","React","Component","LoginForm","useForm","defaultValues","password","rememberMe","register","handleSubmit","errors","formState","reset","onSubmit","onSubmitData","textArea","placeholder","textBlock","userLoginRes","captchaRes","length","SET_INITIALIZED","initialized","initSuccess","LazyWithSuspense","Suspense","fallback","DialogsContainer","lazy","ProfileContainer","UsersContainer","App","initializeApp","path","render","exact","compose","withRouter","app","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducersBunch","combineReducers","profilePage","dialogsPage","usersPage","form","store","createStore","composeWithDevTools","applyMiddleware","thunkMiddleware","window","rerenderEntireTree","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.ecb07960.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"textBlock\":\"Common_textBlock__IWGm7\",\"textArea\":\"Common_textArea__1ljcg\",\"error\":\"Common_error__18zfi\"};","import {ThunkType} from './redux-store';\r\n\r\nconst initState = {\r\n    error: null as string | null,\r\n    editMode: false\r\n}\r\n\r\ntype InitStateType = typeof initState\r\n\r\nexport const formReducer = (state = initState, action: FormActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'form/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'form/SET-EDIT-MODE':\r\n            return {...state, editMode: action.isEditMode}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setFormError = (error: string | null) => ({type: 'form/SET-ERROR', error} as const)\r\nexport const setEditMode = (isEditMode: boolean) => ({type: 'form/SET-EDIT-MODE', isEditMode} as const)\r\n\r\nexport const onEditMode = (): ThunkType => async (dispatch) => {\r\n    dispatch(setEditMode(true))\r\n}\r\n\r\nexport type FormActionType = ReturnType<typeof setFormError>\r\n    | ReturnType<typeof setEditMode>","export default __webpack_public_path__ + \"static/media/loading-buffering.c7d9f081.gif\";","import loading from '../Img/loading-buffering.gif';\r\nimport React from 'react';\r\n\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img style={{width: '250px'}} src={loading} alt={'preloader'}/>\r\n        </div>\r\n    )\r\n}","export const postFieldValidator = {\r\n    required: 'You can\\'t post an empty post',\r\n    maxLength: {\r\n        value: 10,\r\n        message: 'Max length is 300 characters',\r\n    },\r\n}\r\n\r\nexport const emailFieldValidator = {\r\n    required: 'Please, enter e-mail',\r\n    pattern: {\r\n        value: /^([a-z0-9_-]+\\.)*[a-z0-9_-]+@[a-z0-9_-]+(\\.[a-z0-9_-]+)*\\.[a-z]{2,6}$/,\r\n        message: 'Incorrect e-mail'\r\n    }\r\n}\r\n\r\nexport const passwordFieldValidator = {\r\n    required: 'Please, enter password',\r\n}\r\n\r\nexport const captchaFieldValidator = {\r\n    required: 'Wrong captcha'\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Friends_header__3qTWQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"friend\":\"Friend_friend__2R-La\",\"name\":\"Friend_name__2C8Yt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__17wxo\",\"loginBlock\":\"Header_loginBlock__3fOBz\"};","import {ProfileType} from '../Components/Profile/ProfileInfo/ProfileContainer';\r\nimport {Dispatch} from 'redux';\r\nimport {profileAPI} from '../api/api';\r\nimport {ProfileDataType} from '../Components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm';\r\nimport {ThunkType} from './redux-store';\r\nimport {setEditMode, setFormError} from './form-reducer';\r\n\r\nconst ADD_POST = 'profile/ADD-POST'\r\nconst SET_USER_PROFILE = 'profile/SET-USER-PROFILE'\r\nconst SET_STATUS = 'profile/SET-STATUS'\r\nconst DELETE_POST = 'profile/DELETE-POST'\r\nconst SAVE_PHOTO_SUCCESS = 'profile/SAVE-PHOTO-SUCCESS'\r\n\r\nexport type PostType = {\r\n    id: number\r\n    post: string\r\n    likesCount: number\r\n}\r\n\r\n// export type ProfilePageType = {\r\n//     posts: PostType[],\r\n//     profile: Nullable<ProfileType>,\r\n//     status: string,\r\n// }\r\n\r\nconst initialState = {\r\n    posts: [\r\n        {id: 1, post: 'Hi', likesCount: 15},\r\n        {id: 2, post: 'Yo!', likesCount: 12},\r\n        {id: 3, post: 'Wazzup?', likesCount: 23},\r\n    ] as PostType[],\r\n    profile: null as Nullable<ProfileType>,\r\n    status: '',\r\n}\r\ntype InitStateType = typeof initialState\r\nexport type Nullable<T> = T | null\r\n\r\nexport const profileReducer = (state = initialState, action: PostActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case ADD_POST:\r\n            const newPost: PostType = {\r\n                id: new Date().getTime(),\r\n                post: action.postText,\r\n                likesCount: 0\r\n            };\r\n            return {...state, posts: [newPost, ...state.posts]};\r\n        case SET_USER_PROFILE:\r\n            return {...state, profile: action.profile};\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case DELETE_POST:\r\n            return {...state, posts: state.posts.filter(p => p.id !== action.postId)}\r\n        case SAVE_PHOTO_SUCCESS:\r\n            // @ts-ignore\r\n            return {...state, profile: {...state.profile, photos: action.photos}}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loadUserProfile = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        let getProfileRes = await profileAPI.getUserProfile(userId)\r\n        dispatch(setUserProfile(getProfileRes))\r\n    }\r\n\r\nexport const getUserStatus = (userId: number): ThunkType =>\r\n    async (dispatch) => {\r\n        let getStatusRes = await profileAPI.getUserStatus(userId)\r\n        dispatch(setStatus(getStatusRes))\r\n    }\r\n\r\nexport const updateUserStatus = (status: string): ThunkType =>\r\n    async (dispatch) => {\r\n        let updateStatusRes = await profileAPI.updateStatus(status)\r\n        if (updateStatusRes.data.resultCode === 0) dispatch(setStatus(status))\r\n    }\r\n\r\nexport const uploadPhoto = (file: File): ThunkType =>\r\n    async (dispatch) => {\r\n        let res = await profileAPI.uploadPhoto(file)\r\n        if (res.resultCode === 0) dispatch(uploadPhotoSuccess(res.data.photos))\r\n    }\r\n\r\nexport const submitProfile = (profile: ProfileDataType): ThunkType =>\r\n    async (dispatch, getState) => {\r\n        let res = await profileAPI.submitProfile(profile)\r\n        if (res.resultCode === 0) {\r\n            const userId: number = getState().auth.id!\r\n            let profileRes = await profileAPI.getUserProfile(userId)\r\n            dispatch(setUserProfile(profileRes))\r\n            dispatch(setEditMode(false))\r\n            dispatch(setFormError(null))\r\n        } else {\r\n            dispatch(setFormError(res.messages[0]))\r\n        }\r\n    }\r\n\r\nexport type PostActionType = AddPostType\r\n    | SetUserProfileType\r\n    | SetStatusType\r\n    | DeletePostType\r\n    | SuccessUploadPhotoType\r\n\r\nexport const addPost = (postText: string) => ({type: ADD_POST, postText: postText} as const)\r\nexport const setUserProfile = (profile: Nullable<ProfileType>) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const deletePost = (postId: number) => ({type: DELETE_POST, postId} as const)\r\nexport const uploadPhotoSuccess = (photos: any) => ({type: SAVE_PHOTO_SUCCESS, photos} as const)\r\n\r\ntype AddPostType = ReturnType<typeof addPost>\r\ntype SetUserProfileType = ReturnType<typeof setUserProfile>\r\ntype SetStatusType = ReturnType<typeof setStatus>\r\ntype DeletePostType = ReturnType<typeof deletePost>\r\ntype SuccessUploadPhotoType = ReturnType<typeof uploadPhotoSuccess>","const ADD_MESSAGE = 'dialogs/ADD-MESSAGE'\r\n\r\nexport type MessageType = {\r\n    id: number\r\n    message: string\r\n    sender: boolean\r\n}\r\n\r\nexport type DialogType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst initialState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrew'},\r\n        {id: 3, name: 'Sasha'},\r\n        {id: 4, name: 'Victor'},\r\n        {id: 5, name: 'Valery'},\r\n    ] as DialogType[],\r\n    messages: [\r\n        {id: 1, message: 'Hi', sender: true},\r\n        {id: 2, message: 'Yo!', sender: false},\r\n        {id: 3, message: 'What\\'s up? I saw you yesterday at the park at 9 o\\'clock!', sender: true},\r\n        {id: 4, message: 'Okay... Why do you stalkering me?!', sender: false},\r\n        {id: 5, message: 'I LOVE YOU BABE! I WANNA BE WITH YOU!!!', sender: true},\r\n    ] as MessageType[]\r\n}\r\n\r\nexport type DialogsStateType = typeof initialState\r\n\r\nexport const dialogsReducer = (state = initialState, action: MessageActionType): DialogsStateType => {\r\n    switch (action.type) {\r\n        case ADD_MESSAGE:\r\n            const newMessage: MessageType = {\r\n                id: new Date().getTime(),\r\n                message: action.messageText,\r\n                sender: false\r\n            };\r\n            return {...state, messages: [...state.messages, newMessage]};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type MessageActionType = ReturnType<typeof addMessage>\r\n\r\nexport const addMessage = (messageText: string) => ({type: ADD_MESSAGE, messageText: messageText} as const)\r\n","import {usersAPI} from '../api/api';\r\nimport {Dispatch} from 'redux';\r\n\r\nconst FOLLOW_TOGGLE = 'users/FOLLOW-TOGGLE';\r\nconst SET_USERS = 'users/SET-USERS';\r\nconst SET_CURRENT_PAGE = 'users/SET-CURRENT-PAGE';\r\nconst SET_TOTAL_COUNT = 'users/SET-TOTAL-COUNT';\r\nconst TOGGLE_IS_FETCHING = 'users/TOGGLE-IS-FETCHING';\r\nconst FOLLOWING_IN_PROGRESS = 'users/FOLLOWING-IN-PROGRESS';\r\n\r\ntype PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type UserType = {\r\n    name: string,\r\n    id: number,\r\n    uniqueUrlName: string | null,\r\n    photos: PhotosType,\r\n    status: string | null,\r\n    followed: boolean,\r\n}\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst initialState = {\r\n    users: [] as UserType[],\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    isFollowing: [] as number[]\r\n}\r\n\r\nexport const followToggle = (userID: number) => ({type: FOLLOW_TOGGLE, userID} as const);\r\ntype FollowToggleActionType = ReturnType<typeof followToggle>;\r\nexport const setUsers = (users: UserType[]) => ({type: SET_USERS, users} as const);\r\ntype SetUsersActionType = ReturnType<typeof setUsers>;\r\nexport const setCurrentPage = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const);\r\ntype SetCurrentPageActionType = ReturnType<typeof setCurrentPage>;\r\nexport const setTotalCount = (totalCount: number) => ({type: SET_TOTAL_COUNT, totalCount} as const);\r\ntype SetTotalCountActionType = ReturnType<typeof setTotalCount>\r\nexport const toggleFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\ntype ToggleIsFetchingActionType = ReturnType<typeof toggleFetching>\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userID: number) => ({type: FOLLOWING_IN_PROGRESS, isFetching, userID} as const)\r\ntype IsFollowingActionType = ReturnType<typeof toggleIsFollowingProgress>\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => async (dispatch: Dispatch) => {\r\n    let getUsersRes = await usersAPI.getUsers(currentPage, pageSize)\r\n    dispatch(toggleFetching(false));\r\n    dispatch(setUsers(getUsersRes.items));\r\n    dispatch(setTotalCount(getUsersRes.totalCount));\r\n}\r\n\r\nexport const toggleFollow = (userID: number, isFollowed: boolean) => async (dispatch: Dispatch) => {\r\n    dispatch(toggleIsFollowingProgress(true, userID))\r\n    await usersAPI.getUserData(userID)\r\n    if (isFollowed) {\r\n        let unfollowRes = await usersAPI.unfollowUserRequest(userID)\r\n        if (unfollowRes.data.resultCode === 0) dispatch(followToggle(userID))\r\n    } else {\r\n        let followRes = await usersAPI.followUserRequest(userID)\r\n        if (followRes.data.resultCode === 0) dispatch(followToggle(userID))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userID))\r\n}\r\n\r\nexport type UsersReducerActionType =\r\n    SetUsersActionType\r\n    | FollowToggleActionType\r\n    | SetCurrentPageActionType\r\n    | SetTotalCountActionType\r\n    | ToggleIsFetchingActionType\r\n    | IsFollowingActionType\r\n\r\nexport const usersReducer = (state = initialState, action: UsersReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW_TOGGLE:\r\n            return {...state, users: state.users.map(u => u.id === action.userID ? {...u, followed: !u.followed} : u)};\r\n        case SET_USERS:\r\n            return {...state, users: action.users};\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage};\r\n        case SET_TOTAL_COUNT:\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case FOLLOWING_IN_PROGRESS:\r\n            return {...state, isFollowing: action.isFetching\r\n                    ? [...state.isFollowing, action.userID]\r\n                    : state.isFollowing.filter(id => id !== action.userID)}\r\n        default:\r\n            return state;\r\n    }\r\n}","import axios, {AxiosResponse} from 'axios';\r\nimport {UserType} from '../redux/users-reducer';\r\nimport {ContactsType, ProfileType} from '../Components/Profile/ProfileInfo/ProfileContainer';\r\nimport {SubmitDataType} from '../redux/auth-reducer';\r\nimport {ProfileDataType} from '../Components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'ecad3ae6-8083-4154-b722-6cea4b99f288'\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get<string, AxiosResponse<GetDataType>>\r\n        (`users?page=${currentPage}&count=${pageSize}`).then(res => res.data)\r\n    },\r\n    getUserData(userID: number) {\r\n        return instance.get<AxiosResponse<CommonResponseType<UserType>>>(`follow/${userID}`).then(res => res.data)\r\n    },\r\n    unfollowUserRequest(userID: number) {\r\n        return instance.delete<CommonResponseType>(`follow/${userID}`)\r\n    },\r\n    followUserRequest(userID: number) {\r\n        return instance.post<CommonResponseType>(`follow/${userID}`, {})\r\n    },\r\n}\r\n\r\nexport const authAPI = {\r\n    isAuthRequest() {\r\n        return instance.get<CommonResponseType<IsAuthResponseType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    userLogin(data: SubmitDataType) {\r\n        return instance.post<SubmitDataType, CommonResponseType>(`auth/login`, data)\r\n    },\r\n    userLogout() {\r\n        return instance.delete<CommonResponseType>(`auth/login`)\r\n    },\r\n    captchaRequest() {\r\n        return instance.get<CommonResponseType<{ url: string }>>('security/get-captcha-url')\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getUserProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getUserStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<CommonResponseType>(`profile/status`, {status})\r\n    },\r\n    uploadPhoto(file: File) {\r\n        let formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put<CommonResponseType<PhotosType>>(`profile/photo`, formData, {\r\n            headers: {'Content-Type': 'multipart/form-data'}\r\n        }).then(res => res.data)\r\n    },\r\n    submitProfile(profile: ProfileDataType) {\r\n        return instance.put<CommonResponseType>(`profile`, profile).then(res => res.data)\r\n    }\r\n}\r\n\r\ntype IsAuthResponseType = {\r\n    email: string,\r\n    id: number,\r\n    login: string,\r\n}\r\n\r\ntype GetDataType = {\r\n    error: number,\r\n    items: UserType[],\r\n    totalCount: number\r\n}\r\n\r\ntype PhotosType = {\r\n    photos: {\r\n        small: string\r\n        large: string\r\n    }\r\n}\r\n\r\ntype CommonResponseType<T = {}> = {\r\n    data: T,\r\n    messages: string[],\r\n    fieldsErrors: string[],\r\n    resultCode: number,\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"NavBar_nav__2Q_l4\",\"item\":\"NavBar_item__u5y3L\",\"activeLink\":\"NavBar_activeLink__3WEpb\"};","import React from 'react';\r\n\r\nconst News = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from 'react';\r\nimport s from './Friend.module.css'\r\nimport {FriendsItemType} from '../../../redux/sidebar-reducer';\r\n\r\nexport function Friend (props: FriendsItemType) {\r\n    return(\r\n        <div className={s.friend}>\r\n            <img\r\n                src={props.avatar}\r\n                alt={'avatar'}\r\n            />{'\\n'}\r\n            <span className={s.name}>{props.name}</span>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Friends.module.css'\r\nimport {FriendsItemType} from '../../redux/sidebar-reducer';\r\nimport {Friend} from './Friend/Friend';\r\n\r\ntype FriendsPropsType = {\r\n    friends: FriendsItemType[]\r\n}\r\n\r\nexport function Friends (props: FriendsPropsType) {\r\n    let friendItems = props.friends.map(f => <Friend key={f.id} id={f.id} avatar={f.avatar} name={f.name}/>)\r\n    return(\r\n        <div className={s.friendsCont}>\r\n            <span className={s.header}>Friends</span>\r\n            {friendItems}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport s from './NavBar.module.css'\r\nimport {Friends} from '../Friends/Friends';\r\nimport {NavBarPropsType} from './NavBarContainer';\r\n\r\nconst NavBar = (props: NavBarPropsType) => {\r\n    return (<nav className={s.nav}>\r\n                <div className={s.mainNav}>\r\n                    <div className={s.item}>\r\n                        <NavLink to={'/profile'} activeClassName={s.activeLink}>Profile</NavLink>\r\n                    </div>\r\n                    <div className={`${s.item} ${s.active}`}>\r\n                        <NavLink to={'/dialogs'} activeClassName={s.activeLink}>Messages</NavLink>\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <NavLink to={'/news'} activeClassName={s.activeLink}>News</NavLink>\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <NavLink to={'/users'} activeClassName={s.activeLink}>Users</NavLink>\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <NavLink to={'/music'} activeClassName={s.activeLink}>Music</NavLink>\r\n                    </div>\r\n                    <div className={s.item}>\r\n                        <NavLink to={'/settings'} activeClassName={s.activeLink}>Settings</NavLink>\r\n                    </div>\r\n                </div>\r\n                <div>\r\n                    <Friends friends={props.friends}/>\r\n                </div>\r\n            </nav>)\r\n}\r\n\r\nexport default NavBar;","import NavBar from './NavBar';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {FriendsItemType} from '../../redux/sidebar-reducer';\r\n\r\ntype MapStateToPropsType = {\r\n    friends: FriendsItemType[]\r\n}\r\n\r\nconst mapStateToProps = (props: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        friends: props.sidebar.friends\r\n    }\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n\r\n}\r\n\r\nexport type NavBarPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst mapDispatchToProps = (): MapDispatchToPropsType => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nexport const NavBarContainer = connect(mapStateToProps, mapDispatchToProps)(NavBar)","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Header.module.css';\r\nimport {HeaderPropsType} from './HeaderContainer';\r\n\r\nconst Header = (props: HeaderPropsType) => {\r\n    return <header className={s.header}>\r\n        <img src='https://i.ibb.co/kDDBfBd/pngtree-abstract-wave-business-logo-png-image-736975.jpg' alt={'header img'}/>\r\n        <div className={s.loginBlock}>\r\n            {props.isAuth ? <div>{props.login} - <button onClick={props.logout}>Logout</button></div> :\r\n            <NavLink to={'/login/'}>Login</NavLink>}\r\n        </div>\r\n    </header>\r\n}\r\n\r\nexport default Header;","import {authAPI} from '../api/api';\r\nimport {AppStateType, ThunkType} from './redux-store';\r\nimport {Nullable} from './profile-reducer';\r\n\r\nconst SET_USER_DATA = 'auth/SET-USER-DATA'\r\nconst LOGIN_USER = 'auth/LOGIN-USER'\r\nconst STOP_SUBMIT = 'auth/STOP-SUBMIT'\r\nconst SET_CAPTCHA = 'auth/SET-CAPTCHA'\r\n\r\nexport type SubmitDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\nconst initialState = {\r\n    id: null as number | null,\r\n    email: null,\r\n    login: null,\r\n    remember: false,\r\n    isAuth: false,\r\n    error: '',\r\n    captchaUrl: '',\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state = initialState, action: AuthActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {...state, ...action.payload, error: ''} as InitialStateType\r\n        case STOP_SUBMIT:\r\n            return {...state, error: action.error} as InitialStateType\r\n        case SET_CAPTCHA:\r\n            return {...state, captchaUrl: action.url} as InitialStateType\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const loginRequest = (): ThunkType => {\r\n    return async (dispatch, getState: () => AppStateType) => {\r\n        let res = await authAPI.isAuthRequest()\r\n        if (res.resultCode === 0) {\r\n            let {id, email, login} = res.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n    }\r\n}\r\n\r\nexport const login = (data: SubmitDataType): ThunkType => {\r\n    return async (dispatch, getState: () => AppStateType) => {\r\n        let userLoginRes = await authAPI.userLogin(data)\r\n        if (userLoginRes.resultCode === 0) {\r\n            dispatch(loginRequest())\r\n            dispatch(setCaptcha(''))\r\n        } else if (userLoginRes.resultCode === 10) {\r\n            dispatch(stopSubmit(userLoginRes.messages[0]))\r\n            let captchaRes = await authAPI.captchaRequest()\r\n            dispatch(setCaptcha(captchaRes.data.data.url))\r\n        } else {\r\n            if (userLoginRes.messages.length > 0) dispatch(stopSubmit(userLoginRes.messages[0]))\r\n        }\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkType => {\r\n    return async (dispatch, getState: () => AppStateType) => {\r\n        let logoutRes = await authAPI.userLogout()\r\n        if (logoutRes.data.resultCode === 0) dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport type AuthActionType = SubmitUserLoginType | SetDataActionType | StopSubmitType | SetCaptchaType\r\n\r\nexport const submitUserLogin = (userId: number) => ({type: LOGIN_USER, userId} as const)\r\ntype SubmitUserLoginType = ReturnType<typeof submitUserLogin>\r\nexport const setAuthUserData = (id: Nullable<number>, email: Nullable<string>, login: Nullable<string>, isAuth: boolean, captcha: string = '') =>\r\n    ({type: SET_USER_DATA, payload: {id, email, login, isAuth, captcha}} as const)\r\ntype SetDataActionType = ReturnType<typeof setAuthUserData>\r\nexport const stopSubmit = (error: string) => ({type: STOP_SUBMIT, error} as const)\r\ntype StopSubmitType = ReturnType<typeof stopSubmit>\r\nexport const setCaptcha = (url: string) => ({type: SET_CAPTCHA, url} as const)\r\ntype SetCaptchaType = ReturnType<typeof setCaptcha>\r\n","import React from 'react';\r\nimport Header from './Header';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {logout} from '../../redux/auth-reducer';\r\nimport {Nullable} from '../../redux/profile-reducer';\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n\r\n    render() {\r\n        return <Header {...this.props}/>\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean,\r\n    login: Nullable<string>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    logout: () => void\r\n}\r\n\r\nexport type HeaderPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        login: state.auth.login\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import {useForm, SubmitHandler} from 'react-hook-form';\r\nimport s from '../common/styles/Common.module.css'\r\nimport {captchaFieldValidator, emailFieldValidator, passwordFieldValidator} from '../../utils/validators/validators';\r\n\r\nexport type FormInputsType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string\r\n}\r\n\r\ntype SubmitDataPropsType = {\r\n    onSubmitData: (data: FormInputsType) => void\r\n    error: string\r\n    captchaUrl: string\r\n}\r\n\r\nexport const LoginForm = (props: SubmitDataPropsType) => {\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        reset\r\n    } = useForm<FormInputsType>({\r\n        defaultValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            captcha: '',\r\n        }\r\n    })\r\n\r\n    const onSubmit: SubmitHandler<FormInputsType> = (data: FormInputsType) => {\r\n        props.onSubmitData(data)\r\n        reset()\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <div>\r\n                    <input className={s.textArea} placeholder={'Email...'}\r\n                        {...register('email', emailFieldValidator)}/>\r\n                </div>\r\n                <div className={s.textBlock}>{errors.email?.message}</div>\r\n                <div>\r\n                    <input type={'password'} placeholder={'Password...'}\r\n                        className={s.textArea} {...register('password', passwordFieldValidator)}/>\r\n                </div>\r\n                {\r\n                    props.captchaUrl ?\r\n                        <div>\r\n                            <img src={props.captchaUrl} alt={'captcha'}/>\r\n                            <div>\r\n                                <input className={s.textArea} {...register('captcha', captchaFieldValidator)} />\r\n                            </div>\r\n                            <span className={s.textBlock}>{props.error ? props.error : errors.captcha && errors.captcha?.message}</span>\r\n                        </div>\r\n                        : props.error ? <div className={s.textBlock}>{props.error}</div>\r\n                            : <div className={s.textBlock}>{errors.password?.message}</div>\r\n                }\r\n                <div>\r\n                    <input type={'checkbox'}\r\n                        {...register('rememberMe')}/> Remember me\r\n                </div>\r\n                <div>\r\n                    <input value={'Login'} type={'submit'}/>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {FormInputsType, LoginForm} from './LoginForm';\r\nimport {connect} from 'react-redux';\r\nimport {login, SubmitDataType} from '../../redux/auth-reducer';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n    error: string\r\n    captchaUrl: string\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth,\r\n    error: state.auth.error,\r\n    captchaUrl: state.auth.captchaUrl,\r\n})\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (data: SubmitDataType) => void\r\n}\r\n\r\ntype LoginPagePropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\nconst LoginPage = (props: LoginPagePropsType) => {\r\n\r\n    const onSubmitData = (data: FormInputsType) => {\r\n        props.login(data)\r\n    }\r\n\r\n    return props.isAuth ? (\r\n        <Redirect to={'/profile'}/>\r\n    ) : <div>\r\n        <h1>Login page</h1>\r\n        <LoginForm captchaUrl={props.captchaUrl} error={props.error} onSubmitData={onSubmitData}/>\r\n    </div>\r\n}\r\n\r\nexport default connect(mapStateToProps, {login})(LoginPage)\r\n","import {loginRequest} from './auth-reducer';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType, ThunkType} from './redux-store';\r\n\r\nconst SET_INITIALIZED = 'app/SET-INITIALIZED'\r\n\r\nconst initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nexport const appReducer = (state = initialState, action: AppActionType): InitStateType => {\r\n    switch (action.type) {\r\n        case SET_INITIALIZED:\r\n            return {...state, initialized: true}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n    let promise = dispatch(loginRequest())\r\n    await Promise.all([promise])\r\n    dispatch(initSuccess())\r\n}\r\nexport type AppActionType = InitSuccessType\r\n\r\nexport const initSuccess = () => ({type: SET_INITIALIZED} as const)\r\ntype InitSuccessType = ReturnType<typeof initSuccess>","import React, {ComponentType} from 'react';\r\nimport {Preloader} from '../Components/common/Preloader/Preloader';\r\n\r\nexport function LazyWithSuspense<T = any> (Component: ComponentType){\r\n    return (props: T) => <React.Suspense fallback={<Preloader/>}>\r\n            <Component {...props}/>\r\n        </React.Suspense>\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport News from './Components/News/News';\r\nimport Music from './Components/Music/Music';\r\nimport Settings from './Components/Settings/Settings';\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport {NavBarContainer} from './Components/NavBar/NavBarContainer';\r\nimport HeaderContainer from './Components/Header/HeaderContainer';\r\nimport LoginPage from './Components/LoginPage/LoginPage';\r\nimport {connect} from 'react-redux';\r\nimport {compose} from 'redux';\r\nimport {initializeApp} from './redux/app-reducer';\r\nimport {AppStateType} from './redux/redux-store';\r\nimport {Preloader} from './Components/common/Preloader/Preloader';\r\nimport {LazyWithSuspense} from './HOC/LazyWithSuspense';\r\n\r\ntype HeaderPropsType = MapDispatchToPropsType & MapStateToPropsType\r\n\r\ntype MapStateToPropsType = {\r\n    initialized: boolean\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    initializeApp: () => void\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        initialized: state.app.initialized\r\n    }\r\n}\r\n\r\nconst DialogsContainer = React.lazy(() => import('./Components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./Components/Profile/ProfileInfo/ProfileContainer'))\r\nconst UsersContainer = React.lazy(() => import('./Components/Users/UsersContainer'))\r\n\r\nclass App extends React.Component<HeaderPropsType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) return <Preloader/>\r\n        else return (\r\n            <div className={'app-wrapper'}>\r\n                <HeaderContainer/>\r\n                <NavBarContainer/>\r\n                <div className={'app-wrapper-content'}>\r\n                    <Route path={'/login/'} render={() => (<LoginPage/>)}/>\r\n                    <Route exact path={'/dialogs/'} render={LazyWithSuspense(DialogsContainer)}/>\r\n                    <Route path={'/profile/:usedId?'} render={LazyWithSuspense(ProfileContainer)}/>\r\n                    <Route path={'/users/'} render={LazyWithSuspense(UsersContainer)}/>\r\n                    <Route path={'/news/'} render={() => (<News/>)}/>\r\n                    <Route path={'/music/'} render={() => (<Music/>)}/>\r\n                    <Route path={'/settings/'} render={() => (<Settings/>)}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export type FriendsItemType = {\r\n    id: number\r\n    avatar: string\r\n    name: string\r\n}\r\n\r\nexport type SidebarType = {\r\n    friends: FriendsItemType[]\r\n}\r\n\r\nlet initialState: SidebarType = {\r\n    friends: [\r\n        {\r\n            id: 1,\r\n            avatar: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n            name: 'Alexey'\r\n        },\r\n        {\r\n            id: 2,\r\n            avatar: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n            name: 'Dmitry'\r\n        },\r\n        {\r\n            id: 3,\r\n            avatar: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n            name: 'Sveta'\r\n        }\r\n    ]\r\n}\r\n\r\nexport const sidebarReducer = (state = initialState, action: any) => {\r\n\r\n    return state\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileReducer, PostActionType} from './profile-reducer';\r\nimport {dialogsReducer, MessageActionType} from './dialogs-reducer';\r\nimport {sidebarReducer} from './sidebar-reducer';\r\nimport {usersReducer, UsersReducerActionType} from './users-reducer';\r\nimport {AuthActionType, authReducer} from './auth-reducer';\r\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk';\r\nimport {AppActionType, appReducer} from './app-reducer';\r\nimport {FormActionType, formReducer} from './form-reducer';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n\r\nconst reducersBunch = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    app: appReducer,\r\n    form: formReducer,\r\n});\r\n\r\nexport type ActionType = PostActionType | MessageActionType\r\n    | AppActionType | AuthActionType | UsersReducerActionType\r\n    | FormActionType\r\n\r\nexport const store = createStore(reducersBunch, composeWithDevTools(\r\n        applyMiddleware(thunkMiddleware)\r\n    )\r\n);\r\n\r\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionType>\r\n\r\nexport type AppStateType = ReturnType<typeof reducersBunch>\r\n\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\r\nimport './index.css';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {store} from './redux/redux-store';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nexport const rerenderEntireTree = () => {\r\n    ReactDOM.render(\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>,\r\n        document.getElementById('root')\r\n    );\r\n}\r\nrerenderEntireTree()\r\n\r\nstore.subscribe(rerenderEntireTree)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}