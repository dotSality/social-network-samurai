{"version":3,"sources":["Components/Profile/ProfileInfo/ProfileStatus.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/AddPostForm/AddPostForm.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileInfo/ProfileContainer.tsx","Components/Profile/Profile.module.css","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css"],"names":["ProfileStatus","props","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","value","autoFocus","onBlur","updateUserStatus","onClick","ProfileInfo","profile","className","s","img","src","alt","descriptionBlock","photos","large","Preloader","Post","item","post","likesCount","AddPostForm","useForm","defaultValues","text","register","handleSubmit","errors","formState","reset","errorClassName","textArea","error","onSubmit","data","placeholder","postFieldValidator","textBlock","message","type","MyPosts","postsElements","posts","map","p","id","postsBlock","addPost","MyPostsContainer","connect","state","profilePage","Profile","mainCont","ProfileContainer","userId","this","match","params","usedId","authorizedUserId","history","push","loadUserProfile","getUserStatus","React","Component","compose","auth","isAuth","withRouter","module","exports"],"mappings":"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","file":"static/js/3.7eb93173.chunk.js","sourcesContent":["import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: ProfileStatusPropsType) => {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const onEditMode = () => setEditMode(true)\r\n\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return <div>\r\n        {!editMode ?\r\n            (<div>\r\n                <span onClick={onEditMode}>{status || 'no status'}</span>\r\n            </div>) : (\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus onBlur={offEditMode} value={status}/>\r\n                </div>)}\r\n    </div>\r\n}","import React from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport {Preloader} from '../../common/Preloader/Preloader';\r\nimport {ProfileType} from './ProfileContainer';\r\nimport {ProfileStatus} from './ProfileStatus';\r\nimport {Nullable} from '../../../redux/profile-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n    status: string\r\n    profile: Nullable<ProfileType>\r\n    updateUserStatus: (status: string)=> void\r\n}\r\n\r\nconst ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    className={s.img}\r\n                    src='https://c4.wallpaperflare.com/wallpaper/784/819/740/ultra-wide-photography-beach-wallpaper-preview.jpg'\r\n                    alt={'avatar'}\r\n                />\r\n                <div>\r\n                    <ProfileStatus updateUserStatus={props.updateUserStatus} status={props.status}/>\r\n                </div>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                {props.profile.photos.large && <img src={props.profile.photos.large} alt={'profile owner'}/>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from './Post.module.css'\r\nimport {PostType} from '../../../../redux/profile-reducer';\r\n\r\nconst Post = (props: PostType) => {\r\n    return (<div className={s.item}>\r\n        <img\r\n            src={'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png'}\r\n            alt={'avatar'}/>\r\n        {props.post}\r\n        <div>\r\n            <div>\r\n                likes:{props.likesCount}\r\n                <button>like</button>\r\n                <button>x</button>\r\n            </div>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default Post;","import {useForm} from 'react-hook-form';\r\nimport {postFieldValidator} from '../../../../utils/validators/validators';\r\nimport s from '../../../common/styles/Common.module.css'\r\n\r\ntype PostFormType = {\r\n    text: string,\r\n}\r\n\r\ntype PostFormPropsType = {\r\n    onSubmit: (text: string) => void\r\n}\r\n\r\nexport const AddPostForm = (props: PostFormPropsType) => {\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: {errors},\r\n        reset,\r\n    } = useForm<PostFormType>({\r\n        defaultValues: {\r\n            text: ''\r\n        }\r\n    })\r\n\r\n    const errorClassName = errors.text ? `${s.textArea} ${s.error}` : s.textArea\r\n\r\n    const onSubmit = (data: PostFormType) => {\r\n        props.onSubmit(data.text)\r\n        reset()\r\n    }\r\n\r\n    return <form onSubmit={handleSubmit(onSubmit)}>\r\n            <textarea className={errorClassName} placeholder={'Write something...'}\r\n                {...register('text', postFieldValidator)}/>\r\n        <div className={s.textBlock}\r\n        >{errors.text && errors.text.message}</div>\r\n        <input value={'Publish post'} type='submit'/>\r\n    </form>\r\n}","import React from \"react\";\r\nimport s from './MyPosts.module.css'\r\nimport Post from './Post/Post';\r\nimport {MyPostsPropsType} from './MyPostsContainer';\r\nimport {AddPostForm} from './AddPostForm/AddPostForm';\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n\r\n    let postsElements = props.posts.map(p => (<Post key={p.id} id={p.id} post={p.post} likesCount={p.likesCount}/>))\r\n\r\n    const onSubmit = (text: string) => props.addPost(text)\r\n\r\n    return (<div className={s.postsBlock}>\r\n        <h3>My posts</h3>\r\n        <div>\r\n            <div>\r\n                <AddPostForm onSubmit={onSubmit}/>\r\n            </div>\r\n        </div>\r\n        <div className={s.posts}>\r\n            {postsElements}\r\n        </div>\r\n    </div>)\r\n}\r\n\r\nexport default MyPosts;","import {addPost, PostType} from '../../../redux/profile-reducer'\r\nimport MyPosts from './MyPosts';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\n\r\ntype MapStateToPropsType = {\r\n    posts: PostType[]\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (postText: string) => void\r\n}\r\n\r\nexport type MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {addPost})(MyPosts)","import React from \"react\";\r\nimport s from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport {MyPostsContainer} from './MyPosts/MyPostsContainer';\r\nimport {ProfilePropsType} from './ProfileInfo/ProfileContainer';\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={s.mainCont}>\r\n            <ProfileInfo status={props.status} updateUserStatus={props.updateUserStatus} profile={props.profile}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from '../Profile';\r\nimport {connect} from 'react-redux';\r\nimport {AppStateType} from '../../../redux/redux-store';\r\nimport {getUserStatus, loadUserProfile, updateUserStatus} from '../../../redux/profile-reducer';\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {compose} from 'redux';\r\n\r\ntype PathParamsType = {\r\n    usedId: string\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: string | null,\r\n    website: string | null,\r\n    vk: string | null,\r\n    twitter: string | null,\r\n    instagram: string | null,\r\n    youtube: string | null,\r\n    github: string | null,\r\n    mainLink: string | null\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string | null,\r\n    large: string | null\r\n}\r\nexport type ProfileType = {\r\n    aboutMe: string | null,\r\n    contacts: ContactsType,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string | null,\r\n    fullName: string,\r\n    userId: number,\r\n    photos: PhotosType,\r\n}\r\n\r\ntype MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\ntype MapDispatchToPropsType = {\r\n    setUserProfile: (profile: ProfileType) => void\r\n    loadUserProfile: (userId: number) => void\r\n    getUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport type ProfilePropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype RoutedProfileType = RouteComponentProps<PathParamsType> & ProfilePropsType\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport class ProfileContainer extends React.Component<RoutedProfileType> {\r\n\r\n    componentDidMount() {\r\n        let userId: number = +this.props.match.params.usedId\r\n        // userId ? this.props.history.push('/login') : userId = 6623/*this.props.authorizedUserId */\r\n        if (!userId) {\r\n            // @ts-ignore\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n\r\n        }\r\n        this.props.loadUserProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {loadUserProfile, getUserStatus, updateUserStatus}),\r\n    withRouter,\r\n)(ProfileContainer)","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainCont\":\"Profile_mainCont__1G-aY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__320fJ\",\"img\":\"ProfileInfo_img__3mcCO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3Nv5y\",\"posts\":\"MyPosts_posts__txcdb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2_N5q\"};"],"sourceRoot":""}